import random
import tkinter as tk
from tkinter import messagebox

SKINS = {
    "Consumer Grade": {"probability": 0.7992, "value": 0.10,
                       "items": ["MP9 | Sand Dashed", "P250 | Boreal Forest", "Glock-18 | Death Rattle"],
                       "color": "grey"},
    "Industrial Grade": {"probability": 0.1598, "value": 0.50,
                         "items": ["Nova | Candy Apple", "P90 | Storm", "UMP-45 | Urban DDPAT"], "color": "lightblue"},
    "Mil-Spec": {"probability": 0.0319, "value": 2.00,
                 "items": ["M4A4 | Urban DDPAT", "AK-47 | Safari Mesh", "AWP | Safari Mesh"], "color": "blue"},
    "Restricted": {"probability": 0.0064, "value": 10.00,
                   "items": ["M4A1-S | Boreal Forest", "AK-47 | Blue Laminate", "Desert Eagle | Urban Rubble"],
                   "color": "purple"},
    "Classified": {"probability": 0.0026, "value": 50.00,
                   "items": ["AWP | Lightning Strike", "AK-47 | Fire Serpent", "M4A4 | Howl"], "color": "pink"},
    "Covert": {"probability": 0.00064, "value": 200.00,
               "items": ["Karambit | Fade", "M9 Bayonet | Doppler", "AWP | Dragon Lore"], "color": "red"},
    "Knife": {"probability": 0.00026, "value": 500.00,
              "items": ["Butterfly Knife | Crimson Web", "Bayonet | Fade", "Karambit | Lore"], "color": "gold"}
}

CASE_PRICE = 2.50


class CSGOCaseSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("CSGO Case Opening Simulator")
        self.balance = 100.00
        self.inventory = []
        self.is_animating = False

        self.label_balance = tk.Label(root, text=f"Z콢statek: ${self.balance:.2f}", font=("Arial", 12))
        self.label_balance.pack(pady=10)

        self.canvas = tk.Canvas(root, width=600, height=150, bg="black")
        self.canvas.pack(pady=10)

        self.canvas.create_line(300, 0, 300, 150, fill="white", width=2, dash=(4, 4))

        self.btn_open_case = tk.Button(root, text="Otev콏칤t bednu ($2.50)", command=self.open_case, font=("Arial", 10))
        self.btn_open_case.pack(pady=5)

        self.label_result = tk.Label(root, text="", font=("Arial", 10), wraplength=500)
        self.label_result.pack(pady=10)

        self.btn_show_inventory = tk.Button(root, text="Zobrazit invent치콏", command=self.show_inventory,
                                            font=("Arial", 10))
        self.btn_show_inventory.pack(pady=5)

        self.text_inventory = tk.Text(root, height=10, width=60, font=("Arial", 10))
        self.text_inventory.pack(pady=10)
        self.text_inventory.config(state="disabled")

        self.btn_quit = tk.Button(root, text="Ukon캜it", command=self.quit, font=("Arial", 10))
        self.btn_quit.pack(pady=5)

    def get_random_skin(self):
        rand = random.random()
        cumulative_prob = 0
        for rarity, data in SKINS.items():
            cumulative_prob += data["probability"]
            if rand <= cumulative_prob:
                return random.choice(data["items"]), rarity, data["value"], data["color"]
        return random.choice(SKINS["Consumer Grade"]["items"]), "Consumer Grade", SKINS["Consumer Grade"]["value"], \
        SKINS["Consumer Grade"]["color"]

    def open_case(self):
        if self.is_animating:
            return
        if self.balance < CASE_PRICE:
            messagebox.showwarning("Chyba", "Nedostatek prost콏edk콢! Pot콏ebujete alespo켿 $2.50.")
            return

        self.balance -= CASE_PRICE
        self.label_balance.config(text=f"Z콢statek: ${self.balance:.2f}")
        self.label_result.config(text="Otev칤r치n칤 bedny... 游꾸")
        self.btn_open_case.config(state="disabled")
        self.is_animating = True

        self.animation_skins = []
        for _ in range(30):
            skin, rarity, value, color = self.get_random_skin()
            self.animation_skins.append((skin, rarity, value, color))

        self.target_skin = self.get_random_skin()
        self.animation_skins[-5] = self.target_skin

        self.animate_case_opening()

    def animate_case_opening(self):
        self.canvas.delete("skin")  # Smaz치n칤 p콏edchoz칤ch skin콢
        skin_width = 100
        skin_height = 100
        offset = 0
        self.animation_offset = getattr(self, "animation_offset", 0)

        for i, (skin, rarity, value, color) in enumerate(self.animation_skins):
            x = i * (skin_width + 10) - self.animation_offset
            if x > -skin_width and x < 600:
                self.canvas.create_rectangle(x, 25, x + skin_width, 25 + skin_height, fill=color, tags="skin")
                self.canvas.create_text(x + skin_width / 2, 50, text=skin, fill="white", font=("Arial", 8), width=90,
                                        tags="skin")
                self.canvas.create_text(x + skin_width / 2, 90, text=rarity, fill="white", font=("Arial", 8),
                                        tags="skin")

        self.animation_offset += 20
        if self.animation_offset < (len(self.animation_skins) - 5) * (
                skin_width + 10) - 300:
            self.root.after(50, self.animate_case_opening)
        else:
            self.show_case_result()

    def show_case_result(self):
        skin, rarity, value, color = self.target_skin
        self.inventory.append((skin, rarity, value))
        self.label_result.config(text=f"Z칤skali jste: {skin} ({rarity}, hodnota: ${value:.2f})!")
        self.btn_open_case.config(state="normal")
        self.is_animating = False
        self.animation_offset = 0

    def show_inventory(self):
        self.text_inventory.config(state="normal")
        self.text_inventory.delete(1.0, tk.END)
        if not self.inventory:
            self.text_inventory.insert(tk.END, "Invent치콏 je pr치zdn칳!")
        else:
            for skin, rarity, value in self.inventory:
                self.text_inventory.insert(tk.END, f"- {skin} ({rarity}, hodnota: ${value:.2f})\n")
        self.text_inventory.config(state="disabled")

    def quit(self):
        messagebox.showinfo("Konec", f"D캩kujeme za hran칤! Kone캜n칳 z콢statek: ${self.balance:.2f}")
        self.root.quit()


if __name__ == "__main__":
    root = tk.Tk()
    app = CSGOCaseSimulator(root)
    root.geometry("600x700")
    root.mainloop()
